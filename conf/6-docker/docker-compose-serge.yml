#                                 #
# This is my docker compose file. #
#                                 #

version: "3.9"

# Services.
services:

    # Bazarr
    bazarr:
        container_name: bazarr
        environment:
            - PUID=${UID}
            - PGID=${GID}
            - TZ=${TZ}
        image: linuxserver/bazarr:latest
        ports:
            - "6767:6767"
        restart: ${US}
        volumes:
            - ${CONFIG}/bazarr:/config
            - /mnt/vd0/data/videos/movies:/movies
            - /mnt/vd0/data/videos/series:/tv

    # Bitwarden
    bitwarden:
        container_name: bitwarden
        environment:
            - PUID=${UID}
            - PGID=${GID}
            - TZ=${TZ}
            - LOG_FILE=/data/bitwarden.log
            - SIGNUPS_ALLOWED=true
        image: vaultwarden/server:latest
        ports:
            - "8000:80"
        restart: ${US}
        volumes:
            - ${CONFIG}/bitwarden:/data

    # Bookstack
    bookstack:
        container_name: bookstack
        environment:
            - PUID=${UID}
            - PGID=${GID}
            - TZ=${TZ}
            - APP_URL=http://${SERVER}.local:6875
            - DB_HOST=${IP}
            - DB_USER=${BKSTCK_DB_USER}
            - DB_PASS=${PW}
            - DB_DATABASE=${BKSTCK_DB_DATABASE}
        image: linuxserver/bookstack:latest
        ports:
            - "6875:80"
        restart: ${US}
        volumes:
            - ${CONFIG}/bookstack:/config

    # Firefly
    firefly:
        container_name: firefly
        environment:
            - PUID=${UID}
            - GUID=${GID}
            - TZ=${TZ}
            - APP_KEY=${FRFL_APP_KEY}
            - DB_CONNECTION=${FRFL_DB_CONNECTION}
            - DB_HOST=${IP}
            - DB_PORT=${FRFL_DB_PORT}
            - DB_DATABASE=${FRFL_DB_DATABASE}
            - DB_USERNAME=${FRFL_DB_USERNAME}
            - DB_PASSWORD=${PW}
        image: fireflyiii/core:latest
        ports:
            - "8082:8080"
        restart: ${US}
        volumes:
            - ${CONFIG}/firefly/upload:/var/www/html/storage/upload

    #Firefly Data Importer
    firefly-di:
        container_name: firefly-di
        environment:
            - PUID=${UID}
            - GUID=${GID}
            - TZ=${TZ}
            - FIREFLY_III_ACCESS_TOKEN=${FRFL_ACCESS_TOKEN}
            - NORDIGEN_ID=${FRFL_NRDGN_ID}
            - NORDIGEN_KEY=${FRFL_NRDGN_KEY}
        image: fireflyiii/data-importer:latest
        ports:
            - "8083:8080"
        restart: ${US}

    # Gitea
    gitea:
        container_name: gitea
        environment:
            - USER_UID=${UID}
            - USER_GID=${GID}
            - PUID=${UID}
            - PGID=${GID}
            - TZ=${TZ}
            - DB_TYPE=${GITEA_DB_TYPE}
            - DB_HOST=sql://${IP}:3306
            - DB_NAME=${GITEA_DB_DATABASE}
            - DB_USER=${GITEA_DB_USERNAME}
            - DB_PASSWD=${PW}
        image: gitea/gitea:latest
        ports:
            - "3000:3000"
            - "222:22"
        restart: ${US}
        volumes:
            - ${CONFIG}/gitea:/data
            - /etc/timezone:/etc/timezone:ro
            - /etc/localtime:/etc/localtime:ro

    # Grocy
    grocy:
        container_name: grocy
        environment:
            - PUID=${UID}
            - PGID=${GID}
            - TZ=${TZ}
        image: linuxserver/grocy
        ports:
            - "9283:80"
        restart: ${US}
        volumes:
            - ${CONFIG}/grocy:/config

    # MotionEye
    motioneye:
        container_name: motioneye
        environment:
            - PUID=${UID}
            - GUID=${GID}
            - TIMEZONE=${TZ}
        hostname: motioneye
        image: jshridha/motioneye:latest
        ports:
            - "8765:8765"
        restart: ${US}
        volumes:
            - ${CONFIG}/motioneye:/config

    # Nginx proxy manager
    nginx-proxy-manager:
        container_name: nginx-proxy-manager
        environment:
            - PUID=${UID}
            - GUID=${GID}
            - TZ=${TZ}
            - DB_MYSQL_HOST=${IP}
            - DB_MYSQL_PORT=${NPM_DB_PORT}
            - DB_MYSQL_USER=${NPM_DB_USER}
            - DB_MYSQL_PASSWORD=${PW}
            - DB_MYSQL_NAME=${NPM_DB_NAME}
        image: jc21/nginx-proxy-manager:latest
        ports:
            - "8181:81"
            - "8081:80"
            - "4443:443"
        restart: ${US}
        volumes:
            - ${CONFIG}/nginx-proxy-manager/config:/app/config
            - ${CONFIG}/nginx-proxy-manager/data:/data
            - ${CONFIG}/nginx-proxy-manager/letsencrypt:/etc/letsencrypt

    # Ouroboros
    ouroboros:
        container_name: ouroboros
        environment:
            - CLEANUP=true
            - CRON=0 4 * * *
            - LOG_LEVEL=info
            - SELF_UPDATE=true
            - NOTIFIERS=${OUROBOROS_NOTIFIERS}
            - TZ=${TZ}
        image: pyouroboros/ouroboros:latest
        restart: ${US}
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock

    # Plex
    plex:
        container_name: plex
        devices:
            - "/dev/dri:/dev/dri"
        environment:
            - PLEX_UID=${UID}
            - PLEX_GID=${GID}
            - TZ=${TZ}
            - PLEX_CLAIM=${PLEX_CLAIM}
            - VERSION=docker
        image: lscr.io/linuxserver/plex:latest
        ports:
            - "32400:32400"
        restart: ${US}
        volumes:
            - ${CONFIG}/plex:/config
            - /mnt/vd0/data/videos:/data
            - /media/arnold/ssd-data/videos:/arnold-videos
            - /media/arnold/ssd-data/music:/arnold-music

    # Portainer
    portainer:
        command: -H unix:///var/run/docker.sock
        container_name: portainer
        environment:
            - PUID=${UID}
            - PGID=${GID}
            - TZ=${TZ}
        image: portainer/portainer-ce:latest
        ports:
            - "9000:9000"
        restart: ${US}
        volumes:
            - ${CONFIG}/portainer:/data
            - /etc/localtime:/etc/localtime:ro
            - ${CONFIG}/../shared:/shared
            - /var/run/docker.sock:/var/run/docker.sock

    # Prowlarr
    prowlarr:
        container_name: prowlarr
        environment:
            - PUID=${UID}
            - PGID=${GID}
            - TZ=${TZ}
        image: linuxserver/prowlarr:develop
        ports:
            - "9696:9696"
        restart: ${US}
        volumes:
            - ${CONFIG}/prowlarr:/config

    # QBittorrentVPN
    qbittorrentvpn:
        container_name: qbittorrentvpn
        environment:
            - PUID=${UID}
            - PGID=${GID}
            - TZ=${TZ}
            - VPN_ENABLED=yes
            - VPN_USERNAME=${VPN_USERNAME}
            - VPN_PASSWORD=${VPN_PASSWORD}
            - LAN_NETWORK=192.168.1.0/24
            - NAME_SERVERS=192.168.1.90,1.1.1.1
        image: markusmcnugen/qbittorrentvpn:latest
        ports:
            - "8080:8080"
            - "8999:8999"
            - "8999:8999/udp"
        privileged: true
        restart: ${US}
        volumes:
            - ${CONFIG}/qbittorrent:/config
            - /home/${USER}/downloads/qbittorrentvpn:/downloads

    # Radarr
    radarr:
        container_name: radarr
        environment:
            - PUID=${UID}
            - PGID=${GID}
            - TZ=${TZ}
        image: linuxserver/radarr:nightly
        ports:
            - "7878:7878"
        restart: ${US}
        volumes:
            - ${CONFIG}/radarr:/config
            - /mnt/vd0/data/videos:/movies
            - /home/${USER}/downloads/qbittorrentvpn:/downloads

    # Scrutiny
    scrutiny:
        cap_add:
            - SYS_RAWIO
        container_name: scrutiny
        devices:
            - /dev/sda:/dev/sda
            - /dev/sdb:/dev/sdb
            - /dev/sdc:/dev/sdc
            - /dev/sdd:/dev/sdd
            - /dev/sde:/dev/sde
            - /dev/sdf:/dev/sdf
        environment:
            - PUID=${UID}
            - PGID=${GID}
            - TZ=${TZ}
        image: ghcr.io/analogj/scrutiny:master-omnibus
        ports:
            - "8088:8080"
            - "8086:8086"
        restart: ${US}
        volumes:
            - ${CONFIG}/scrutiny:/opt/scrutiny/config
            - ${CONFIG}/scrutiny/influxdb2:/opt/scrutiny/influxdb
            - /run/udev:/run/udev:ro

    # Sonarr
    sonarr:
        container_name: sonarr
        environment:
            - PUID=${UID}
            - PGID=${GID}
            - TZ=${TZ}
        image: linuxserver/sonarr:latest
        ports:
            - "8989:8989"
        restart: ${US}
        volumes:
            - ${CONFIG}/sonarr:/config
            - /mnt/vd0/data/videos:/tv
            - /home/${USER}/downloads/qbittorrentvpn:/downloads

    # Tautulli
    tautulli:
        container_name: tautulli
        environment:
            - PUID=${UID}
            - GUID=${GID}
            - TZ=${TZ}
        image: tautulli/tautulli:latest
        ports:
            - "8182:8181"
        restart: ${US}
        volumes:
            - ${CONFIG}/tautulli:/config
            - ${CONFIG}/plex/Library/Application Support/Plex Media Server/Logs:/plex_logs:ro

    # Tdarr
    tdarr:
        container_name: tdarr
        devices:
            - "/dev/dri:/dev/dri"
        environment:
            - PUID=${UID}
            - PGID=${GID}
            - TZ=${TZ}
            - serverIP=${IP}
            - serverPort=8266
            - webUIPort=8265
            - internalNode=true
            - nodeID=${SERVER}Node
        image: haveagitgat/tdarr:latest
        ports:
            - "8265:8265"
            - "8266:8266"
            - "8267:8267"
        restart: ${US}
        volumes:
            - ${CONFIG}/tdarr/server:/app/server
            - ${CONFIG}/tdarr/configs:/app/configs
            - ${CONFIG}/tdarr/logs:/app/logs
            - /mnt/vd0/data:/media
            - ${CONFIG}/../../downloads/tdarr/cache:/temp
